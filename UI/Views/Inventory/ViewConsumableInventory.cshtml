@using SCMS.Resource
@model IEnumerable<SCMS.Model.Inventory>
@{
    var gridPageSize = SCMS.CoreBusinessLogic.Settings.SettingsHelper<SCMS.CoreBusinessLogic.Settings.CommonSettings>.Settings.GridPageSize;
}
<div class="partialViewCard">
    <div class="partialViewCardHeader">
        <h3>@Resources.Inventory_Index_ViewConsumables
        </h3>
    </div>
    <br />


    @{
        var pagerStyleFlags = new[] 
        { 
            //new { Key = "pageInput", Value = GridPagerStyles.PageInput },
            //new { Key = "nextPrevious", Value = GridPagerStyles.NextPrevious },
            //new { Key = "numeric", Value = GridPagerStyles.Numeric },
            new { Key = "pageSize", Value = GridPagerStyles.PageSizeDropDown }
        };

        GridPagerStyles pagerStyles = GridPagerStyles.NextPreviousAndNumeric;
        //GridPagerStyles pagerStyles = GridPagerStyles.NextPrevious;
        foreach (var pagerStyleFlag in pagerStyleFlags)
        {
            pagerStyles |= pagerStyleFlag.Value;

        }
    }


    @(Html.Telerik().Grid(Model)
            .Name("Consumables")
            .ToolBar(commands => commands
            .Custom()
                .HtmlAttributes(new { id = "Cexport" })
                .Text("Export to Excel")
                .Action("ExportConsumables", "Inventory", new { page = 1, pageSize = 10, orderBy = "~", filter = "~", groupBy = "~" }))
            .Columns(columns =>
            {
                columns.Bound(o => o.ItName).Title(Resources.Global_String_ItemName).Width("33%");
                columns.Bound(o => o.ItemClassification).Title(Resources.Global_String_Classification).Width("15%");
                columns.Bound(o => o.ItemQTY).Title(Resources.Global_String_Qty).Width("17%");
                columns.Bound(o => o.Unit).Title(Resources.Global_String_Unit).Width("15");
                columns.Bound(o => o.WarehouseName).Title(Resources.Global_String_Warehouse).Width("20%");
            })
            .DataBinding(dataBinding => dataBinding.Ajax().Select("_CustomBinding", "Inventory"))
            //.Pageable(settings => settings.Style(pagerStyles).PageSize(gridPageSize).Total((int)ViewData["total"]).Position(GridPagerPosition.Both))
            .Pageable(settings => settings.Style(pagerStyles).PageSize(10, new int[] { 10, 20, 50, 100, 200 }).Total((int)ViewData["total"]).Position(GridPagerPosition.Both))
            .EnableCustomBinding(true)
            .ClientEvents(events => events.OnDataBound("onConsumableDataBound"))
            .Sortable()
            .Filterable()
            .Groupable()
    )

    <br />
</div>
